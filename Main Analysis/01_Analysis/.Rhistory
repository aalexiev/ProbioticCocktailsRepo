inner_join(ASA_diffdf, by = "Replicate") %>% # combine the alone differences by replicate
select(c("Replicate", "Diff_Bd", "alone_sum")) %>% # select only these relevant cols
gather("Diff_Bd", "alone_sum", key = Key, value = Value) # gather the data
# run t-test and save it in stats object
ttest <- t.test(Value ~ Key, data = ASA_df, paired = T)
cfs_as_stats[[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]][["Bd_diff_plot"]][["ASA_ttest"]] <- ttest
cfs_as_stats[["ASA_ttest_sign"]][[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]] <- if (ttest$p.value > 0.05) {
print("Additive")
} else {
if (ttest$estimate > 0) {
print("Antagonistic")
} else {
print("Synergistic")
}
}
write.table(cfs_as_stats[["ASA_ttest_sign"]],
"output_files/ASA_ttest_sign.txt")
}
# add column to be used for colors and stats
prelim_cfsas <- read.delim("Prelim_results_cfsas.txt", sep = "\t",
header = T) # read in this file that has the column I need, although there are extra sample IDs for controls I don't want to bother graphing
# filter out outliers (FALSE in removePoint)
cfs_as_fitFilt <- cfs_as_fitFull$`Plot fit of pooled model`$data %>%
dplyr::filter(removePoint == FALSE, Time == 95) %>% # remove outliers and filter out only Time = 95 since that is the most stable looking point from the preliminary outlier graphs
inner_join(prelim_cfsas, by = "Treatment") # add column for colors
# change Jliv_BTP to be JlivBTP and 2f_JlivBTP_Bd to 2F_JlivBTP_Bd
cfs_as_fitFilt <- data.frame(lapply(cfs_as_fitFilt, function(x) {
gsub("Jliv_BTP", "JlivBTP", x)
}))
cfs_as_fitFilt <- data.frame(lapply(cfs_as_fitFilt, function(x) {
gsub("2f_JlivBTP_Bd", "2F_JlivBTP_Bd", x)
}))
# make this function for making tukey group labels for graph later
# group the treatments that are not different each other together.
generate_label_df <- function(TUKEY, variable){
# Extract labels and factor levels from Tukey post-hoc
Tukey.levels <- TUKEY[[variable]][,4]
Tukey.labels <- data.frame(multcompLetters(Tukey.levels)['Letters'])
#I need to put the labels in the same order as in the boxplot :
Tukey.labels$Treatment = rownames(Tukey.labels)
Tukey.labels = Tukey.labels[order(Tukey.labels$Treatment) , ]
return(Tukey.labels)
}
# filter and do stats by each type of combo
list_bact <- c("20D", "2F", "54D", "Jliv10", "JlivBTP", "37E") # make list of bacteria
cats_pairs <- combn(list_bact, 2)
cfs_as_stats <- list()
for (i in 1:ncol(cats_pairs)) { #for each pair of bacteria
## make a df with only related trials
# find mean OD of live Bd trials
Mean_Bdlive <- mean(as.numeric(cfs_as_fitFilt$OD[cfs_as_fitFilt$Treatment == "Live_Bd"]), na.rm = T)
cfs_as_fitsubbed <- cfs_as_fitFilt %>%
filter(Treatment %in% c("Live_Bd", # subset the data
paste0(cats_pairs[1,i], "_Bd"),
paste0(cats_pairs[2,i], "_Bd"),
paste0(cats_pairs[1,i], "_", cats_pairs[2,i], "_Bd"),
paste0(cats_pairs[2,i], "_", cats_pairs[1,i], "_Bd"))) %>%
mutate(uniques = paste0(.group,"_",SampleType)) %>% # make a col that is group and sample type for later ease of graphing
mutate(Diff_Bd = Mean_Bdlive - as.numeric(OD)) # make a col that is difference between mean live Bd and each trial OD
cfs_as_stats[[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]][["df_filt"]] <- cfs_as_fitsubbed # save the file from above in output list
## Calculate stats of raw data and add to the output list
cfs_as_stats[[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]][["ANOVA"]] <- aov(OD ~ Treatment, cfs_as_fitsubbed) # run ANOVA, save in output list
tuk <- TukeyHSD(aov(OD ~ Treatment, cfs_as_fitsubbed)) # run Tukey HSD (tehcnically Tukey-Kramer for unbalanced group sizes)
cfs_as_stats[[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]][["tuk"]] <- tuk # save in output list
cfs_as_stats[[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]][["tuk_groups"]] <- generate_label_df(tuk, "Treatment")
## Calculate stats for Bd diffs and save
cfs_as_stats[[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]][["Bd_diff_plot"]][["ANOVA"]] <- aov(Diff_Bd ~ Treatment, cfs_as_fitsubbed) # run ANOVA, save in output list
tuk <- TukeyHSD(aov(Diff_Bd ~ Treatment, cfs_as_fitsubbed)) # run Tukey HSD (tehcnically Tukey-Kramer for unbalanced group sizes)
cfs_as_stats[[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]][["Bd_diff_plot"]][["tuk"]] <- tuk # save in output list
cfs_as_stats[[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]][["Bd_diff_plot"]][["tuk_groups"]] <- generate_label_df(tuk, "Treatment")
## Graph the data and add to output list
cfs_as_graphMeans <- cfs_as_fitsubbed %>%
group_by(Treatment) %>%
dplyr::summarise(Mean_OD = mean(as.numeric(OD), na.rm = T),
std = sd(as.numeric(OD), na.rm = T)) %>%
mutate(SampleType = case_when(Treatment == paste0(cats_pairs[1,i], "_Bd") ~ "Alone Trial", # add SampleType col for later graphing
Treatment == paste0(cats_pairs[2,i], "_Bd") ~ "Alone Trial",
Treatment == paste0(cats_pairs[1,i], "_", cats_pairs[2,i], "_Bd") ~ "Pair Trial",
Treatment == paste0(cats_pairs[2,i], "_", cats_pairs[1,i], "_Bd") ~ "Pair Trial",
Treatment == "Live_Bd" ~ "Bd Control")) %>%
mutate(Diff_Bd = Mean_OD[Treatment == "Live_Bd"] - Mean_OD) %>% # calculate the difference in means
mutate(sd_Diff_Bd = sqrt((std[Treatment == "Live_Bd"])^2 + std^2)) # subtract SD for each mean
# add group labels and bact names to graphing data object
bact_names <- dplyr::select(cfs_as_fitsubbed, c(bact_name, Treatment)) %>%
unique() # create df with the names non-duplicated
cfs_as_graphMeans_HSD <- cfs_as_graphMeans %>%
inner_join(cfs_as_stats[[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]][["tuk_groups"]], by = "Treatment") %>% # add grouping letters
inner_join(bact_names, by = "Treatment") # add  bact_names for later graphing
cfs_as_stats[[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]][["HSD_plot"]][["graphing_input_df"]] <- cfs_as_graphMeans # save in output list
# plot of HSD test
cfs_as_graphMeans_HSD$bact_name <- factor(cfs_as_graphMeans_HSD$bact_name, levels = c(cfs_as_graphMeans_HSD$bact_name[1], cfs_as_graphMeans_HSD$bact_name[2], cfs_as_graphMeans_HSD$bact_name[3], cfs_as_graphMeans_HSD$bact_name[4]))
HSD_plot <- ggplot(data = cfs_as_graphMeans_HSD, aes(x = bact_name, y = Mean_OD,
color = SampleType)) +
geom_point(stat = "identity", size = 3) +
geom_errorbar(mapping = aes(ymin = (Mean_OD - std), ymax = (Mean_OD + std)),
position = position_dodge(width = 0.9), width = 0.25) +
geom_text(aes(y = Mean_OD + std, label = Letters),
position = position_dodge(width = 0.9), color = "black",
vjust = -0.5, size = 7, show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 25, hjust = 1),
axis.title.x = element_blank(),
text = element_text(size = 17)) +
ylab("Mean Bd growth per treatment at time 100 hrs (avg of reps)")
cfs_as_stats[[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]][["HSD_plot"]] <- HSD_plot # save in output list
ggsave(filename = paste0(cats_pairs[1,i], "_", cats_pairs[2,i], "_HSDplot.png"),
path = "Prelim_Figs/prelimPlots_cfs_as/HSD_plots",
plot = HSD_plot,
width = 5, height = 3, dpi = 300) # save plot to computer
# add group labels for Bd diffs to graphing data object
cfs_as_graphMeans_Bddiff <- cfs_as_graphMeans %>%
inner_join(cfs_as_stats[[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]][["Bd_diff_plot"]][["tuk_groups"]], by = "Treatment") %>% # add grouping letters
inner_join(bact_names, by = "Treatment") # add  bact_names for later graphing
cfs_as_stats[[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]][["Bd_diff_plot"]][["graphing_input_df"]] <- cfs_as_graphMeans # save in output list
# plot of Bd diff
cfs_as_graphMeans_Bddiff$bact_name <- factor(cfs_as_graphMeans_Bddiff$bact_name, levels = c(cfs_as_graphMeans_Bddiff$bact_name[1], cfs_as_graphMeans_Bddiff$bact_name[2], cfs_as_graphMeans_Bddiff$bact_name[3], cfs_as_graphMeans_Bddiff$bact_name[4]))
Bd_diff_plot <- ggplot(data = cfs_as_graphMeans_Bddiff, aes(x = bact_name, y = Diff_Bd,
color = SampleType)) +
geom_point(stat = "identity", size = 3) +
geom_errorbar(mapping = aes(ymin = (Diff_Bd - sd_Diff_Bd), ymax = (Diff_Bd + sd_Diff_Bd)),
position = position_dodge(width = 0.9), width = 0.25) +
geom_text(aes(y = Diff_Bd + sd_Diff_Bd, label = Letters),
position = position_dodge(width = 0.9), color = "black",
vjust = -0.5, size = 7, show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.title.x = element_blank(),
text = element_text(size = 17)) +
coord_cartesian(ylim = c(-0.07, 0.23)) +
ylab("Difference in Bd growth from live Bd \ncontrol at time 100 hrs (avg of reps)")
cfs_as_stats[[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]][["Bd_diff_plot"]] <- Bd_diff_plot # save in output list
ggsave(filename = paste0(cats_pairs[1,i], "_", cats_pairs[2,i], "_BdDiffPlot.png"),
path = "Prelim_Figs/prelimPlots_cfs_as/Bd_diff_plots",
plot = Bd_diff_plot,
width = 8, height = 7, dpi = 300) # save plot to computer
## Find out which are additive/synergistic/antagonistic
# make a dataframe of the sum of each difference between trial and live Bd for each individual replicate
ASA_diffdf <- cfs_as_fitsubbed %>%
group_by(Replicate) %>%
dplyr::summarise(alone_sum = Diff_Bd[Treatment == paste0(cats_pairs[1,i], "_Bd")] + Diff_Bd[Treatment == paste0(cats_pairs[2,i], "_Bd")]) # make column of sums of each RepSamp
# add to new df for running stats
ASA_df <- cfs_as_fitsubbed %>%
dplyr::filter(Treatment == paste0(cats_pairs[1,i], "_", cats_pairs[2,i], "_Bd") | Treatment == paste0(cats_pairs[2,i], "_", cats_pairs[1,i], "_Bd")) %>% # filter out only the combined treatment from large df
inner_join(ASA_diffdf, by = "Replicate") %>% # combine the alone differences by replicate
select(c("Replicate", "Diff_Bd", "alone_sum")) %>% # select only these relevant cols
gather("Diff_Bd", "alone_sum", key = Key, value = Value) # gather the data
# run t-test and save it in stats object
ttest <- t.test(Value ~ Key, data = ASA_df, paired = T)
cfs_as_stats[[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]][["Bd_diff_plot"]][["ASA_ttest"]] <- ttest
cfs_as_stats[["ASA_ttest_sign"]][[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]] <- if (ttest$p.value > 0.05) {
print("Additive")
} else {
if (ttest$estimate > 0) {
print("Antagonistic")
} else {
print("Synergistic")
}
}
write.table(cfs_as_stats[["ASA_ttest_sign"]],
"output_files/ASA_ttest_sign.txt")
}
View(HSD_plot)
# add column to be used for colors and stats
prelim_cfsas <- read.delim("Prelim_results_cfsas.txt", sep = "\t",
header = T) # read in this file that has the column I need, although there are extra sample IDs for controls I don't want to bother graphing
# filter out outliers (FALSE in removePoint)
cfs_as_fitFilt <- cfs_as_fitFull$`Plot fit of pooled model`$data %>%
dplyr::filter(removePoint == FALSE, Time == 95) %>% # remove outliers and filter out only Time = 95 since that is the most stable looking point from the preliminary outlier graphs
inner_join(prelim_cfsas, by = "Treatment") # add column for colors
# change Jliv_BTP to be JlivBTP and 2f_JlivBTP_Bd to 2F_JlivBTP_Bd
cfs_as_fitFilt <- data.frame(lapply(cfs_as_fitFilt, function(x) {
gsub("Jliv_BTP", "JlivBTP", x)
}))
cfs_as_fitFilt <- data.frame(lapply(cfs_as_fitFilt, function(x) {
gsub("2f_JlivBTP_Bd", "2F_JlivBTP_Bd", x)
}))
# make this function for making tukey group labels for graph later
# group the treatments that are not different each other together.
generate_label_df <- function(TUKEY, variable){
# Extract labels and factor levels from Tukey post-hoc
Tukey.levels <- TUKEY[[variable]][,4]
Tukey.labels <- data.frame(multcompLetters(Tukey.levels)['Letters'])
#I need to put the labels in the same order as in the boxplot :
Tukey.labels$Treatment = rownames(Tukey.labels)
Tukey.labels = Tukey.labels[order(Tukey.labels$Treatment) , ]
return(Tukey.labels)
}
# filter and do stats by each type of combo
list_bact <- c("20D", "2F", "54D", "Jliv10", "JlivBTP", "37E") # make list of bacteria
cats_pairs <- combn(list_bact, 2)
cfs_as_stats <- list()
for (i in 1:ncol(cats_pairs)) { #for each pair of bacteria
## make a df with only related trials
# find mean OD of live Bd trials
Mean_Bdlive <- mean(as.numeric(cfs_as_fitFilt$OD[cfs_as_fitFilt$Treatment == "Live_Bd"]), na.rm = T)
cfs_as_fitsubbed <- cfs_as_fitFilt %>%
filter(Treatment %in% c("Live_Bd", # subset the data
paste0(cats_pairs[1,i], "_Bd"),
paste0(cats_pairs[2,i], "_Bd"),
paste0(cats_pairs[1,i], "_", cats_pairs[2,i], "_Bd"),
paste0(cats_pairs[2,i], "_", cats_pairs[1,i], "_Bd"))) %>%
mutate(uniques = paste0(.group,"_",SampleType)) %>% # make a col that is group and sample type for later ease of graphing
mutate(Diff_Bd = Mean_Bdlive - as.numeric(OD)) # make a col that is difference between mean live Bd and each trial OD
cfs_as_stats[[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]][["df_filt"]] <- cfs_as_fitsubbed # save the file from above in output list
## Calculate stats of raw data and add to the output list
cfs_as_stats[[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]][["ANOVA"]] <- aov(OD ~ Treatment, cfs_as_fitsubbed) # run ANOVA, save in output list
tuk <- TukeyHSD(aov(OD ~ Treatment, cfs_as_fitsubbed)) # run Tukey HSD (tehcnically Tukey-Kramer for unbalanced group sizes)
cfs_as_stats[[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]][["tuk"]] <- tuk # save in output list
cfs_as_stats[[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]][["tuk_groups"]] <- generate_label_df(tuk, "Treatment")
## Calculate stats for Bd diffs and save
cfs_as_stats[[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]][["Bd_diff_plot"]][["ANOVA"]] <- aov(Diff_Bd ~ Treatment, cfs_as_fitsubbed) # run ANOVA, save in output list
tuk <- TukeyHSD(aov(Diff_Bd ~ Treatment, cfs_as_fitsubbed)) # run Tukey HSD (tehcnically Tukey-Kramer for unbalanced group sizes)
cfs_as_stats[[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]][["Bd_diff_plot"]][["tuk"]] <- tuk # save in output list
cfs_as_stats[[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]][["Bd_diff_plot"]][["tuk_groups"]] <- generate_label_df(tuk, "Treatment")
## Graph the data and add to output list
cfs_as_graphMeans <- cfs_as_fitsubbed %>%
group_by(Treatment) %>%
dplyr::summarise(Mean_OD = mean(as.numeric(OD), na.rm = T),
std = sd(as.numeric(OD), na.rm = T)) %>%
mutate(SampleType = case_when(Treatment == paste0(cats_pairs[1,i], "_Bd") ~ "Alone Trial", # add SampleType col for later graphing
Treatment == paste0(cats_pairs[2,i], "_Bd") ~ "Alone Trial",
Treatment == paste0(cats_pairs[1,i], "_", cats_pairs[2,i], "_Bd") ~ "Pair Trial",
Treatment == paste0(cats_pairs[2,i], "_", cats_pairs[1,i], "_Bd") ~ "Pair Trial",
Treatment == "Live_Bd" ~ "Bd Control")) %>%
mutate(Diff_Bd = Mean_OD[Treatment == "Live_Bd"] - Mean_OD) %>% # calculate the difference in means
mutate(sd_Diff_Bd = sqrt((std[Treatment == "Live_Bd"])^2 + std^2)) # subtract SD for each mean
# add group labels and bact names to graphing data object
bact_names <- dplyr::select(cfs_as_fitsubbed, c(bact_name, Treatment)) %>%
unique() # create df with the names non-duplicated
cfs_as_graphMeans_HSD <- cfs_as_graphMeans %>%
inner_join(cfs_as_stats[[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]][["tuk_groups"]], by = "Treatment") %>% # add grouping letters
inner_join(bact_names, by = "Treatment") # add  bact_names for later graphing
cfs_as_stats[[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]][["HSD_plot"]][["graphing_input_df"]] <- cfs_as_graphMeans # save in output list
# plot of HSD test
cfs_as_graphMeans_HSD$bact_name <- factor(cfs_as_graphMeans_HSD$bact_name, levels = c(cfs_as_graphMeans_HSD$bact_name[1], cfs_as_graphMeans_HSD$bact_name[2], cfs_as_graphMeans_HSD$bact_name[3], cfs_as_graphMeans_HSD$bact_name[4]))
HSD_plot <- ggplot(data = cfs_as_graphMeans_HSD, aes(x = bact_name, y = Mean_OD,
color = SampleType)) +
geom_point(stat = "identity", size = 3) +
geom_errorbar(mapping = aes(ymin = (Mean_OD - std), ymax = (Mean_OD + std)),
position = position_dodge(width = 0.9), width = 0.25) +
geom_text(aes(y = Mean_OD + std, label = Letters),
position = position_dodge(width = 0.9), color = "black",
vjust = -0.5, size = 7, show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 25, hjust = 1),
axis.title.x = element_blank(),
text = element_text(size = 17)) +
ylab("Mean Bd growth per treatment at time 100 hrs (avg of reps)")
cfs_as_stats[[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]][["HSD_plot"]] <- HSD_plot # save in output list
ggsave(filename = paste0(cats_pairs[1,i], "_", cats_pairs[2,i], "_HSDplot.png"),
path = "Prelim_Figs/prelimPlots_cfs_as/HSD_plots",
plot = HSD_plot,
width = 3, height = 1, dpi = 300) # save plot to computer
# add group labels for Bd diffs to graphing data object
cfs_as_graphMeans_Bddiff <- cfs_as_graphMeans %>%
inner_join(cfs_as_stats[[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]][["Bd_diff_plot"]][["tuk_groups"]], by = "Treatment") %>% # add grouping letters
inner_join(bact_names, by = "Treatment") # add  bact_names for later graphing
cfs_as_stats[[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]][["Bd_diff_plot"]][["graphing_input_df"]] <- cfs_as_graphMeans # save in output list
# plot of Bd diff
cfs_as_graphMeans_Bddiff$bact_name <- factor(cfs_as_graphMeans_Bddiff$bact_name, levels = c(cfs_as_graphMeans_Bddiff$bact_name[1], cfs_as_graphMeans_Bddiff$bact_name[2], cfs_as_graphMeans_Bddiff$bact_name[3], cfs_as_graphMeans_Bddiff$bact_name[4]))
Bd_diff_plot <- ggplot(data = cfs_as_graphMeans_Bddiff, aes(x = bact_name, y = Diff_Bd,
color = SampleType)) +
geom_point(stat = "identity", size = 3) +
geom_errorbar(mapping = aes(ymin = (Diff_Bd - sd_Diff_Bd), ymax = (Diff_Bd + sd_Diff_Bd)),
position = position_dodge(width = 0.9), width = 0.25) +
geom_text(aes(y = Diff_Bd + sd_Diff_Bd, label = Letters),
position = position_dodge(width = 0.9), color = "black",
vjust = -0.5, size = 7, show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.title.x = element_blank(),
text = element_text(size = 17)) +
coord_cartesian(ylim = c(-0.07, 0.23)) +
ylab("Difference in Bd growth from live Bd \ncontrol at time 100 hrs (avg of reps)")
cfs_as_stats[[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]][["Bd_diff_plot"]] <- Bd_diff_plot # save in output list
ggsave(filename = paste0(cats_pairs[1,i], "_", cats_pairs[2,i], "_BdDiffPlot.png"),
path = "Prelim_Figs/prelimPlots_cfs_as/Bd_diff_plots",
plot = Bd_diff_plot,
width = 8, height = 7, dpi = 300) # save plot to computer
## Find out which are additive/synergistic/antagonistic
# make a dataframe of the sum of each difference between trial and live Bd for each individual replicate
ASA_diffdf <- cfs_as_fitsubbed %>%
group_by(Replicate) %>%
dplyr::summarise(alone_sum = Diff_Bd[Treatment == paste0(cats_pairs[1,i], "_Bd")] + Diff_Bd[Treatment == paste0(cats_pairs[2,i], "_Bd")]) # make column of sums of each RepSamp
# add to new df for running stats
ASA_df <- cfs_as_fitsubbed %>%
dplyr::filter(Treatment == paste0(cats_pairs[1,i], "_", cats_pairs[2,i], "_Bd") | Treatment == paste0(cats_pairs[2,i], "_", cats_pairs[1,i], "_Bd")) %>% # filter out only the combined treatment from large df
inner_join(ASA_diffdf, by = "Replicate") %>% # combine the alone differences by replicate
select(c("Replicate", "Diff_Bd", "alone_sum")) %>% # select only these relevant cols
gather("Diff_Bd", "alone_sum", key = Key, value = Value) # gather the data
# run t-test and save it in stats object
ttest <- t.test(Value ~ Key, data = ASA_df, paired = T)
cfs_as_stats[[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]][["Bd_diff_plot"]][["ASA_ttest"]] <- ttest
cfs_as_stats[["ASA_ttest_sign"]][[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]] <- if (ttest$p.value > 0.05) {
print("Additive")
} else {
if (ttest$estimate > 0) {
print("Antagonistic")
} else {
print("Synergistic")
}
}
write.table(cfs_as_stats[["ASA_ttest_sign"]],
"output_files/ASA_ttest_sign.txt")
}
# add column to be used for colors and stats
prelim_cfsas <- read.delim("Prelim_results_cfsas.txt", sep = "\t",
header = T) # read in this file that has the column I need, although there are extra sample IDs for controls I don't want to bother graphing
# filter out outliers (FALSE in removePoint)
cfs_as_fitFilt <- cfs_as_fitFull$`Plot fit of pooled model`$data %>%
dplyr::filter(removePoint == FALSE, Time == 95) %>% # remove outliers and filter out only Time = 95 since that is the most stable looking point from the preliminary outlier graphs
inner_join(prelim_cfsas, by = "Treatment") # add column for colors
# change Jliv_BTP to be JlivBTP and 2f_JlivBTP_Bd to 2F_JlivBTP_Bd
cfs_as_fitFilt <- data.frame(lapply(cfs_as_fitFilt, function(x) {
gsub("Jliv_BTP", "JlivBTP", x)
}))
cfs_as_fitFilt <- data.frame(lapply(cfs_as_fitFilt, function(x) {
gsub("2f_JlivBTP_Bd", "2F_JlivBTP_Bd", x)
}))
# make this function for making tukey group labels for graph later
# group the treatments that are not different each other together.
generate_label_df <- function(TUKEY, variable){
# Extract labels and factor levels from Tukey post-hoc
Tukey.levels <- TUKEY[[variable]][,4]
Tukey.labels <- data.frame(multcompLetters(Tukey.levels)['Letters'])
#I need to put the labels in the same order as in the boxplot :
Tukey.labels$Treatment = rownames(Tukey.labels)
Tukey.labels = Tukey.labels[order(Tukey.labels$Treatment) , ]
return(Tukey.labels)
}
# filter and do stats by each type of combo
list_bact <- c("20D", "2F", "54D", "Jliv10", "JlivBTP", "37E") # make list of bacteria
cats_pairs <- combn(list_bact, 2)
cfs_as_stats <- list()
for (i in 1:ncol(cats_pairs)) { #for each pair of bacteria
## make a df with only related trials
# find mean OD of live Bd trials
Mean_Bdlive <- mean(as.numeric(cfs_as_fitFilt$OD[cfs_as_fitFilt$Treatment == "Live_Bd"]), na.rm = T)
cfs_as_fitsubbed <- cfs_as_fitFilt %>%
filter(Treatment %in% c("Live_Bd", # subset the data
paste0(cats_pairs[1,i], "_Bd"),
paste0(cats_pairs[2,i], "_Bd"),
paste0(cats_pairs[1,i], "_", cats_pairs[2,i], "_Bd"),
paste0(cats_pairs[2,i], "_", cats_pairs[1,i], "_Bd"))) %>%
mutate(uniques = paste0(.group,"_",SampleType)) %>% # make a col that is group and sample type for later ease of graphing
mutate(Diff_Bd = Mean_Bdlive - as.numeric(OD)) # make a col that is difference between mean live Bd and each trial OD
cfs_as_stats[[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]][["df_filt"]] <- cfs_as_fitsubbed # save the file from above in output list
## Calculate stats of raw data and add to the output list
cfs_as_stats[[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]][["ANOVA"]] <- aov(OD ~ Treatment, cfs_as_fitsubbed) # run ANOVA, save in output list
tuk <- TukeyHSD(aov(OD ~ Treatment, cfs_as_fitsubbed)) # run Tukey HSD (tehcnically Tukey-Kramer for unbalanced group sizes)
cfs_as_stats[[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]][["tuk"]] <- tuk # save in output list
cfs_as_stats[[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]][["tuk_groups"]] <- generate_label_df(tuk, "Treatment")
## Calculate stats for Bd diffs and save
cfs_as_stats[[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]][["Bd_diff_plot"]][["ANOVA"]] <- aov(Diff_Bd ~ Treatment, cfs_as_fitsubbed) # run ANOVA, save in output list
tuk <- TukeyHSD(aov(Diff_Bd ~ Treatment, cfs_as_fitsubbed)) # run Tukey HSD (tehcnically Tukey-Kramer for unbalanced group sizes)
cfs_as_stats[[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]][["Bd_diff_plot"]][["tuk"]] <- tuk # save in output list
cfs_as_stats[[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]][["Bd_diff_plot"]][["tuk_groups"]] <- generate_label_df(tuk, "Treatment")
## Graph the data and add to output list
cfs_as_graphMeans <- cfs_as_fitsubbed %>%
group_by(Treatment) %>%
dplyr::summarise(Mean_OD = mean(as.numeric(OD), na.rm = T),
std = sd(as.numeric(OD), na.rm = T)) %>%
mutate(SampleType = case_when(Treatment == paste0(cats_pairs[1,i], "_Bd") ~ "Alone Trial", # add SampleType col for later graphing
Treatment == paste0(cats_pairs[2,i], "_Bd") ~ "Alone Trial",
Treatment == paste0(cats_pairs[1,i], "_", cats_pairs[2,i], "_Bd") ~ "Pair Trial",
Treatment == paste0(cats_pairs[2,i], "_", cats_pairs[1,i], "_Bd") ~ "Pair Trial",
Treatment == "Live_Bd" ~ "Bd Control")) %>%
mutate(Diff_Bd = Mean_OD[Treatment == "Live_Bd"] - Mean_OD) %>% # calculate the difference in means
mutate(sd_Diff_Bd = sqrt((std[Treatment == "Live_Bd"])^2 + std^2)) # subtract SD for each mean
# add group labels and bact names to graphing data object
bact_names <- dplyr::select(cfs_as_fitsubbed, c(bact_name, Treatment)) %>%
unique() # create df with the names non-duplicated
cfs_as_graphMeans_HSD <- cfs_as_graphMeans %>%
inner_join(cfs_as_stats[[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]][["tuk_groups"]], by = "Treatment") %>% # add grouping letters
inner_join(bact_names, by = "Treatment") # add  bact_names for later graphing
cfs_as_stats[[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]][["HSD_plot"]][["graphing_input_df"]] <- cfs_as_graphMeans # save in output list
# plot of HSD test
cfs_as_graphMeans_HSD$bact_name <- factor(cfs_as_graphMeans_HSD$bact_name, levels = c(cfs_as_graphMeans_HSD$bact_name[1], cfs_as_graphMeans_HSD$bact_name[2], cfs_as_graphMeans_HSD$bact_name[3], cfs_as_graphMeans_HSD$bact_name[4]))
HSD_plot <- ggplot(data = cfs_as_graphMeans_HSD, aes(x = bact_name, y = Mean_OD,
color = SampleType)) +
geom_point(stat = "identity", size = 3) +
geom_errorbar(mapping = aes(ymin = (Mean_OD - std), ymax = (Mean_OD + std)),
position = position_dodge(width = 0.9), width = 0.25) +
geom_text(aes(y = Mean_OD + std, label = Letters),
position = position_dodge(width = 0.9), color = "black",
vjust = -0.5, size = 7, show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 25, hjust = 1),
axis.title.x = element_blank(),
text = element_text(size = 17)) +
ylab("Mean Bd growth per treatment at time 100 hrs (avg of reps)")
cfs_as_stats[[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]][["HSD_plot"]] <- HSD_plot # save in output list
ggsave(filename = paste0(cats_pairs[1,i], "_", cats_pairs[2,i], "_HSDplot.png"),
path = "Prelim_Figs/prelimPlots_cfs_as/HSD_plots",
plot = HSD_plot,
width = 3, height = 1, dpi = 300) # save plot to computer
# add group labels for Bd diffs to graphing data object
cfs_as_graphMeans_Bddiff <- cfs_as_graphMeans %>%
inner_join(cfs_as_stats[[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]][["Bd_diff_plot"]][["tuk_groups"]], by = "Treatment") %>% # add grouping letters
inner_join(bact_names, by = "Treatment") # add  bact_names for later graphing
cfs_as_stats[[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]][["Bd_diff_plot"]][["graphing_input_df"]] <- cfs_as_graphMeans # save in output list
# plot of Bd diff
cfs_as_graphMeans_Bddiff$bact_name <- factor(cfs_as_graphMeans_Bddiff$bact_name, levels = c(cfs_as_graphMeans_Bddiff$bact_name[1], cfs_as_graphMeans_Bddiff$bact_name[2], cfs_as_graphMeans_Bddiff$bact_name[3], cfs_as_graphMeans_Bddiff$bact_name[4]))
Bd_diff_plot <- ggplot(data = cfs_as_graphMeans_Bddiff, aes(x = bact_name, y = Diff_Bd,
color = SampleType)) +
geom_point(stat = "identity", size = 3) +
geom_errorbar(mapping = aes(ymin = (Diff_Bd - sd_Diff_Bd), ymax = (Diff_Bd + sd_Diff_Bd)),
position = position_dodge(width = 0.9), width = 0.25) +
geom_text(aes(y = Diff_Bd + sd_Diff_Bd, label = Letters),
position = position_dodge(width = 0.9), color = "black",
vjust = -0.5, size = 7, show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.title.x = element_blank(),
text = element_text(size = 17)) +
ylab("Difference in Bd growth from live Bd \ncontrol at time 100 hrs (avg of reps)")
cfs_as_stats[[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]][["Bd_diff_plot"]] <- Bd_diff_plot # save in output list
ggsave(filename = paste0(cats_pairs[1,i], "_", cats_pairs[2,i], "_BdDiffPlot.png"),
path = "Prelim_Figs/prelimPlots_cfs_as/Bd_diff_plots",
plot = Bd_diff_plot,
width = 8, height = 7, dpi = 300) # save plot to computer
## Find out which are additive/synergistic/antagonistic
# make a dataframe of the sum of each difference between trial and live Bd for each individual replicate
ASA_diffdf <- cfs_as_fitsubbed %>%
group_by(Replicate) %>%
dplyr::summarise(alone_sum = Diff_Bd[Treatment == paste0(cats_pairs[1,i], "_Bd")] + Diff_Bd[Treatment == paste0(cats_pairs[2,i], "_Bd")]) # make column of sums of each RepSamp
# add to new df for running stats
ASA_df <- cfs_as_fitsubbed %>%
dplyr::filter(Treatment == paste0(cats_pairs[1,i], "_", cats_pairs[2,i], "_Bd") | Treatment == paste0(cats_pairs[2,i], "_", cats_pairs[1,i], "_Bd")) %>% # filter out only the combined treatment from large df
inner_join(ASA_diffdf, by = "Replicate") %>% # combine the alone differences by replicate
select(c("Replicate", "Diff_Bd", "alone_sum")) %>% # select only these relevant cols
gather("Diff_Bd", "alone_sum", key = Key, value = Value) # gather the data
# run t-test and save it in stats object
ttest <- t.test(Value ~ Key, data = ASA_df, paired = T)
cfs_as_stats[[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]][["Bd_diff_plot"]][["ASA_ttest"]] <- ttest
cfs_as_stats[["ASA_ttest_sign"]][[paste0(cats_pairs[1,i], "_", cats_pairs[2,i])]] <- if (ttest$p.value > 0.05) {
print("Additive")
} else {
if (ttest$estimate > 0) {
print("Antagonistic")
} else {
print("Synergistic")
}
}
write.table(cfs_as_stats[["ASA_ttest_sign"]],
"output_files/ASA_ttest_sign.txt")
}
load("/Users/alal3493/Documents/Projects/03_ProbioticCocktails/02_PreliminaryAnalysis/Cocktail_trials/01_preliminaryAnalysis/01_prelimViz.RData")
CFS_bact_r_dotplot <- ggplot(data = cfsbactr_graphMeans, mapping = aes(x = bact_name, y = Mean_r)) +
geom_point() +
geom_errorbar(mapping = aes(ymin = (Mean_r - std),
ymax = (Mean_r + std))) +
annotate("rect", xmin = 0.5, ymin = -Inf,
xmax = 6.5, ymax = Inf,
fill = "#D95F02", alpha = 0.3) +
annotate("rect", xmin = 6.5, ymin = -Inf,
xmax = 21.5, ymax = Inf,
fill = "#7570B3", alpha = 0.3) +
annotate("label", x = 3.5, y = 1.5,
label = "Single Microbes\n(n = 6)",
size = 6) +
annotate("label", x = 14, y = 1.5,
label = "Co-cultures of two microbes\n(n = 15)",
size = 6) +
geom_text(aes(y = Mean_r + std, label = Letters),
position = position_dodge(width = 0.9), color = "black",
vjust = -0.5, size = 6, show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 70, hjust = 1, size = 17),
axis.title.x = element_blank(),
axis.title.y = element_text(size = 17),
axis.text.y = element_text(size = 15)) +
coord_cartesian(ylim = c(-0.03, 1.6)) +
ylab("Average bacterial growth rate, r (per hour)")
CFS_bact_r_dotplot
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
library(agricolae)
library(lsmeans)
library(multcompView)
library(ggpubr)
library(ggforce)
library(RColorBrewer)
sessionInfo()
# setwd("/Users/alal3493/Documents/Projects/03_ProbioticCocktails/02_PreliminaryAnalysis/Cocktail_trials/01_preliminaryAnalysis")
setwd("/Users/alal3493/Documents/Projects/03_ProbioticCocktails/02_PreliminaryAnalysis/Cocktail_trials/01_preliminaryAnalysis")
CFS_bact_r_dotplot <- ggplot(data = cfsbactr_graphMeans, mapping = aes(x = bact_name, y = Mean_r)) +
geom_point() +
geom_errorbar(mapping = aes(ymin = (Mean_r - std),
ymax = (Mean_r + std))) +
annotate("rect", xmin = 0.5, ymin = -Inf,
xmax = 6.5, ymax = Inf,
fill = "#D95F02", alpha = 0.3) +
annotate("rect", xmin = 6.5, ymin = -Inf,
xmax = 21.5, ymax = Inf,
fill = "#7570B3", alpha = 0.3) +
annotate("label", x = 3.5, y = 1.5,
label = "Single Microbes\n(n = 6)",
size = 6) +
annotate("label", x = 14, y = 1.5,
label = "Co-cultures of two microbes\n(n = 15)",
size = 6) +
geom_text(aes(y = Mean_r + std, label = Letters),
position = position_dodge(width = 0.9), color = "black",
vjust = -0.5, size = 6, show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 70, hjust = 1, size = 17),
axis.title.x = element_blank(),
axis.title.y = element_text(size = 17),
axis.text.y = element_text(size = 15)) +
coord_cartesian(ylim = c(-0.03, 1.6)) +
ylab("Average bacterial growth rate, r (per hour)")
CFS_bact_r_dotplot
# save plot to computer
ggsave(filename = "CFS_bact_r_dotplot.png",
path = "Prelim_Figs",
plot = CFS_bact_r_dotplot,
width = 18, height = 11, dpi = 300)
save.image("~/Documents/Projects/03_ProbioticCocktails/02_PreliminaryAnalysis/Cocktail_trials/01_preliminaryAnalysis/01_prelimViz.RData")
